(function () {
    var FormClass = afw.BasePanel.extend({
        GetType: function () {
            return acc.AccDocItemsGridControl;
        },

        init: function (options) {
            var that = this;

            afw.BasePanel.fn.init.call(that, options);
            var designObjectData = afw.uiApi.GetControlDesignObjectDataByName(that.GetType().TypeName);
            afw.uiApi.CreateControlByObjectData(that, designObjectData, false);

            that._AccDocEditForm = options.AccDocEditForm;
            that._RowsEntityList = that._AccDocEditForm.ItemsEntityList;
            that._GridBodyPanel = that.FindControl("GridBodyPanel");
            that._GridBodyDockPanel = that.FindControl("GridBodyDockPanel");
            that._AddRowButton = that.FindControl("AddRowButton");
        
            that._BeforeSavedRowsEntityList = null;
             
            that._GridBodyPanel.SetHeight(10);

            that._RowHeight = 95;

            that.PreviousSelectedRowNo = null;
            that.PreviousSelectedAccount = null;
            that._PreviousRowControl = null;

            that.CurrentSelectedRowNo = null;
            that.CurrentSelectedAccount = null;
            
            that._AddRowButton.bind("Click", function (e) { that._AddRowButton_Click(e); });
        },

        GetAccDocEditForm: function () {
            var that = this;

            return that._AccDocEditForm;
        },

        GetRowsCount: function () {
            var that = this;

            return that._GridBodyDockPanel.GetPanesCount() - 1;
        },

        AddRow: function (rowEntity) {
            var that = this;

            var rowIndex = that._GridBodyDockPanel.GetPanesCount() - 1;
            var rowPane = that._GridBodyDockPanel.InsertPane(rowIndex, { Size: that._RowHeight }, true);

            var itemKind = null;
            if (rowEntity.GetFieldValue("Account") != null)
                itemKind = "Account";

            that._rowControl = new acc.AccDocItemsGridRowControl({
                ParentControl: rowPane,
                Name: "Row_" + GenerateGuid(),
                GridControl: that,
                RowEntity: rowEntity,
                ItemKind: itemKind
            });

            that._AdjustControl();
        },

        SaveRow: function (rowEntity) {
            var that = this;
             
            //that._AccDocEditForm._IsShowMassege = false;
            if (that._AccDocEditForm._BindableEntity._Entity.GetFieldValue("IsAutoGenerated") != true) {
                if (rowEntity.ChangeStatus == "Add") {
                    if (!ValueIsEmpty(rowEntity.GetFieldValue("Account")) &&
                        (!ValueIsEmpty(rowEntity.GetFieldValue("DebtorAmount")) || !ValueIsEmpty(rowEntity.GetFieldValue("CreditorAmount")))) {

                        if (that._AccDocEditForm._HasFloatControls(rowEntity.GetFieldValue("Account")) == true) {
                            var personPriority = that._AccDocEditForm._FloatPriorityEntity.GetFieldValue("PersonPriority");
                            var costCenterPriority = that._AccDocEditForm._FloatPriorityEntity.GetFieldValue("CostCenterPriority");
                            var projectPriority = that._AccDocEditForm._FloatPriorityEntity.GetFieldValue("ProjectPriority");

                            if (rowEntity.GetFieldValue("Person") == null && !(personPriority == null || personPriority == 0)) {
                                afw.MessageDialog.Show(" در ردیف " + rowEntity.GetFieldValue("RowNo") + " مقدار فیلد شخص وارد نکرده اید.");
                                return false;
                            }
                            else if (rowEntity.GetFieldValue("CostCenter") == null && !(costCenterPriority == null || costCenterPriority == 0)) {
                                afw.MessageDialog.Show(" در ردیف " + rowEntity.GetFieldValue("RowNo") + " مقدار فیلد هزینه وارد نکرده اید.");
                                return false;
                            } else if (rowEntity.GetFieldValue("Project") == null && !(projectPriority == null || projectPriority == 0)) {
                                afw.MessageDialog.Show(" در ردیف " + rowEntity.GetFieldValue("RowNo") + " مقدار فیلد پروژه وارد نکرده اید.");
                                return false;
                            }
                        }

                        if (that._AccDocEditForm._BindableEntity._Entity.ChangeStatus == "Add") {

                            if (!ValueIsEmpty(that._AccDocEditForm._BindableEntity.get("FinancialGroup"))) {

                                that._AccDocEditForm._BindableEntity._Entity.SetFieldValue("DocStatus", that._AccDocEditForm._DraftID);

                                if (that._AccDocEditForm._SumDebtorAmount > that._AccDocEditForm._SumCreditorAmount) {
                                    that._AccDocEditForm._BindableEntity._Entity.SetFieldValue("BalanceStatus", that._AccDocEditForm._DebtorID);
                                    that._AccDocEditForm._BindableEntity._Entity.SetFieldValue("RemainingAmount", that._AccDocEditForm._SumDebtorAmount - that._AccDocEditForm._SumCreditorAmount);
                                }
                                else if (that._AccDocEditForm._SumDebtorAmount < that._AccDocEditForm._SumCreditorAmount) {
                                    that._AccDocEditForm._BindableEntity._Entity.SetFieldValue("BalanceStatus", that._AccDocEditForm._CreditorID);
                                    that._AccDocEditForm._BindableEntity._Entity.SetFieldValue("RemainingAmount", that._AccDocEditForm._SumDebtorAmount - that._AccDocEditForm._SumCreditorAmount);
                                }

                                afw.uiApi.ApplyEntityChanges(that._AccDocEditForm._BindableEntity._Entity);
                                that._AccDocEditForm._BindableEntity._Entity.ChangeStatus = "None";

                                var rowItemIndex = that._RowsEntityList.Entities.IndexOf(rowEntity);
                                that._RowsEntityList.Entities[rowItemIndex].ChangeStatus = "None";
                            }
                        }
                        else {
                            afw.uiApi.ApplyEntityChanges(rowEntity);

                            var rowItemIndex = that._RowsEntityList.Entities.IndexOf(rowEntity);
                            that._RowsEntityList.Entities[rowItemIndex].ChangeStatus = "None";
                        }
                    }
                }
                else if (rowEntity.ChangeStatus == "Modify") {
                    if (!ValueIsEmpty(rowEntity.GetFieldValue("Account")) &&
                        (!ValueIsEmpty(rowEntity.GetFieldValue("DebtorAmount")) || !ValueIsEmpty(rowEntity.GetFieldValue("CreditorAmount")))) {

                        if (that._AccDocEditForm._HasFloatControls(rowEntity.GetFieldValue("Account")) == true) {
                            var personPriority = that._AccDocEditForm._FloatPriorityEntity.GetFieldValue("PersonPriority");
                            var costCenterPriority = that._AccDocEditForm._FloatPriorityEntity.GetFieldValue("CostCenterPriority");
                            var projectPriority = that._AccDocEditForm._FloatPriorityEntity.GetFieldValue("ProjectPriority");

                            if (rowEntity.GetFieldValue("Person") == null && !(personPriority == null || personPriority == 0)) {
                                afw.MessageDialog.Show(" در ردیف " + rowEntity.GetFieldValue("RowNo") + " مقدار فیلد شخص وارد نکرده اید.");
                                return false;
                            }
                            else if (rowEntity.GetFieldValue("CostCenter") == null && !(costCenterPriority == null || costCenterPriority == 0)) {
                                afw.MessageDialog.Show(" در ردیف " + rowEntity.GetFieldValue("RowNo") + " مقدار فیلد هزینه وارد نکرده اید.");
                                return false;
                            } else if (rowEntity.GetFieldValue("Project") == null && !(projectPriority == null || projectPriority == 0)) {
                                afw.MessageDialog.Show(" در ردیف " + rowEntity.GetFieldValue("RowNo") + " مقدار فیلد پروژه وارد نکرده اید.");
                                return false;
                            }
                        }

                        afw.uiApi.ApplyEntityChanges(rowEntity);

                        var rowItemIndex = that._RowsEntityList.Entities.IndexOf(rowEntity);
                        that._RowsEntityList.Entities[rowItemIndex].ChangeStatus = "None";
                    }
                }
            }
            else
                afw.MessageDialog.Show("امکان تغییر سند اتوماتیک وجود ندارد.");
        },

        RemoveRow: function (rowControl) {
            var that = this;

            var rowIndex = rowControl.ParentControl.GetPaneIndex();
            that._GridBodyDockPanel.RemovePane(rowIndex);

            var rowBindableEntity = rowControl.GetBindableEntity();
            if (rowBindableEntity._Entity.ChangeStatus == "Add") {
                var rowItemIndex = that._RowsEntityList.Entities.IndexOf(rowBindableEntity._Entity);
                that._RowsEntityList.Entities.RemoveItem(rowItemIndex);
            }
            else if (ValueIsIn(rowBindableEntity._Entity.ChangeStatus, ["None", "Modify"]))
                rowBindableEntity._Entity.ChangeStatus = "Delete";

            var rowNumber = 1;
            var rowEntity = null;
            var row = null;
            for (var i = 0; i < that.GetRowsCount() ; i++) {
                row = that.GetRowByIndex(i);
                row.GetBindableEntity().set("RowNo", rowNumber);
                rowNumber++;
            }

            that._AdjustControl();
        },
        
        GetRowByIndex: function (rowIndex) {
            var that = this;

            if (rowIndex > that._GridBodyDockPanel.GetPanesCount() - 2)
                throw String.Format("Row with index {0} not exists.", rowIndex);

            return that._GridBodyDockPanel.Panes[rowIndex].ChildControls[0];
        },

        AddEmptyItems: function (itemsCount) {
            var that = this;

            var priorRowsCount = that.GetRowsCount();
            var itemEntity = null;

            for (var i = 0; i < itemsCount; i++) {
                itemEntity = afw.uiApi.CreateNewEntity("acc.AccDocItem");
                itemEntity.SetFieldValue("AccDoc", that._AccDocEditForm.GetBindableEntity().get("ID"));
                itemEntity.SetFieldValue("RowNo", priorRowsCount + i + 1);

                that._RowsEntityList.Entities.push(itemEntity);
                that.AddRow(itemEntity);
            }
        },

        _AddRowButton_Click: function (e) {
            var that = this;

            that.AddEmptyItems(1);
        },

        _OnResize: function () {
            var that = this;

            afw.BasePanel.fn._OnResize.call(that);

            if (!ValueIsEmpty(that._GridBodyDockPanel))
                that._AdjustControl();
        },

        _AdjustControl: function () {
            var that = this;

            var rowsCount = that._GridBodyDockPanel.GetPanesCount() - 1;
            that._GridBodyPanel.SetMinHeight(rowsCount * that._RowHeight + 5);
            that._GridBodyPanel.SetHeight(rowsCount * that._RowHeight + 5);

            var gridBodyScrollPanel = that.FindControl("GridBodyScrollPanel");
            gridBodyScrollPanel.AdjustScrollBars();

            var scrollWidth = gridBodyScrollPanel.GetVerticalScrollBarWidth();

            var gridTitleDockPanel = that.FindControl("GridTitleDockPanel");
            var lastPaneIndex = gridTitleDockPanel.GetPanesCount() - 1;
            that.FindControl("GridTitleDockPanel").SetPaneSizeSetting(lastPaneIndex, scrollWidth > 0 ? scrollWidth : 1);
        },
         
        _DoDestroy: function () {
            var that = this;

            afw.BasePanel.fn._DoDestroy.call(that);
        }
    });

    //Static Members:

    FormClass.TypeName = "acc.AccDocItemsGridControl";
    FormClass.BaseType = afw.BasePanel;


    acc.AccDocItemsGridControl = FormClass;
})();